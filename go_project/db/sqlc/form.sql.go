// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: form.sql

package db

import (
	"context"
)

const getFormsID = `-- name: getFormsID :many

SELECT id
FROM Form
WHERE id = $1
LIMIT 1
`

// -- name: getFormByID :one
// SELECT *
// FROM form
// WHERE id = $1;
func (q *Queries) getFormsID(ctx context.Context, id int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, getFormsID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const submitForm = `-- name: submitForm :one
INSERT INTO Form(
  id,
  -- viewer_id,
  viewer_name,
  email,
  phone,
  created_at
) VALUES (
  $1,$2,$3,$4,CURRENT_TIMESTAMP
) RETURNING id, viewer_name, email, phone, created_at
`

type submitFormParams struct {
	ID         int32  `json:"id"`
	ViewerName string `json:"viewer_name"`
	Email      string `json:"email"`
	Phone      string `json:"phone"`
}

func (q *Queries) submitForm(ctx context.Context, arg submitFormParams) (Form, error) {
	row := q.db.QueryRow(ctx, submitForm,
		arg.ID,
		arg.ViewerName,
		arg.Email,
		arg.Phone,
	)
	var i Form
	err := row.Scan(
		&i.ID,
		&i.ViewerName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}
