// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: comment.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getCommentFromPost = `-- name: GetCommentFromPost :many
SELECT id, post_id, user_id, text, upvotes, created_at FROM Comment
WHERE post_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCommentFromPost(ctx context.Context, postID uuid.UUID) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentFromPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Text,
			&i.Upvotes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createComment = `-- name: createComment :one
INSERT INTO Comment (
  id,
  post_id,
  user_id,
  text,
  upvotes,
  created_at
) VALUES (
  $1,$2,$3,$4,$5,CURRENT_TIMESTAMP
) RETURNING id, post_id, user_id, text, upvotes, created_at
`

type createCommentParams struct {
	ID      uuid.UUID `json:"id"`
	PostID  uuid.UUID `json:"post_id"`
	UserID  uuid.UUID `json:"user_id"`
	Text    string    `json:"text"`
	Upvotes int32     `json:"upvotes"`
}

func (q *Queries) createComment(ctx context.Context, arg createCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.ID,
		arg.PostID,
		arg.UserID,
		arg.Text,
		arg.Upvotes,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Text,
		&i.Upvotes,
		&i.CreatedAt,
	)
	return i, err
}
