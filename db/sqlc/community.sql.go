// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: community.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCommunity = `-- name: createCommunity :one
INSERT INTO Community (
  id,
  community_name,
  photo,
  created_at
) VALUES (
  $1,$2,$3,CURRENT_TIMESTAMP
) RETURNING id, community_name, photo, created_at
`

type createCommunityParams struct {
	ID            uuid.UUID `json:"id"`
	CommunityName string    `json:"community_name"`
	Photo         []byte    `json:"photo"`
}

func (q *Queries) createCommunity(ctx context.Context, arg createCommunityParams) (Community, error) {
	row := q.db.QueryRow(ctx, createCommunity, arg.ID, arg.CommunityName, arg.Photo)
	var i Community
	err := row.Scan(
		&i.ID,
		&i.CommunityName,
		&i.Photo,
		&i.CreatedAt,
	)
	return i, err
}

const getCommunityIDbyName = `-- name: getCommunityIDbyName :one
SELECT id
FROM Community
WHERE community_name = $1
LIMIT 1
`

func (q *Queries) getCommunityIDbyName(ctx context.Context, communityName string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getCommunityIDbyName, communityName)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
