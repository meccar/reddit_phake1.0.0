// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: rule.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getRuleFromCommunity = `-- name: GetRuleFromCommunity :many
SELECT id, community_id, title, description FROM Rule
WHERE community_id = $1
`

func (q *Queries) GetRuleFromCommunity(ctx context.Context, communityID uuid.UUID) ([]Rule, error) {
	rows, err := q.db.Query(ctx, getRuleFromCommunity, communityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rule{}
	for rows.Next() {
		var i Rule
		if err := rows.Scan(
			&i.ID,
			&i.CommunityID,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createRule = `-- name: createRule :one
INSERT INTO Rule (
  id,
  community_id,
  title,
  description
) VALUES (
  $1,$2,$3,$4
) RETURNING id, community_id, title, description
`

type createRuleParams struct {
	ID          uuid.UUID `json:"id"`
	CommunityID uuid.UUID `json:"community_id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
}

func (q *Queries) createRule(ctx context.Context, arg createRuleParams) (Rule, error) {
	row := q.db.QueryRow(ctx, createRule,
		arg.ID,
		arg.CommunityID,
		arg.Title,
		arg.Description,
	)
	var i Rule
	err := row.Scan(
		&i.ID,
		&i.CommunityID,
		&i.Title,
		&i.Description,
	)
	return i, err
}
