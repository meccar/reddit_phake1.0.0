// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: createSession :one
INSERT INTO Session(
  id,
  username,
  role,
  expires_at,
  created_at
) VALUES (
  $1,$2,$3,$4,CURRENT_TIMESTAMP
) RETURNING id, username, role, expires_at, created_at
`

type createSessionParams struct {
	ID        uuid.UUID          `json:"id"`
	Username  string             `json:"username"`
	Role      string             `json:"role"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) createSession(ctx context.Context, arg createSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.Username,
		arg.Role,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSession = `-- name: deleteSession :exec
DELETE FROM Session
WHERE username = $1
`

func (q *Queries) deleteSession(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteSession, username)
	return err
}

const getAllSessionID = `-- name: getAllSessionID :many
SELECT id
FROM Session
`

func (q *Queries) getAllSessionID(ctx context.Context) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getAllSessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionIDbyID = `-- name: getSessionIDbyID :one
SELECT id
FROM Session
WHERE id = $1
LIMIT 1
`

func (q *Queries) getSessionIDbyID(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getSessionIDbyID, id)
	err := row.Scan(&id)
	return id, err
}
