// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getAllPost = `-- name: GetAllPost :many
SELECT id, title, article, picture, user_id, community_id, upvotes, created_at FROM Post
ORDER BY created_at DESC
`

func (q *Queries) GetAllPost(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getAllPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Article,
			&i.Picture,
			&i.UserID,
			&i.CommunityID,
			&i.Upvotes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostbyID = `-- name: GetPostbyID :one
SELECT id, title, article, picture, user_id, community_id, upvotes, created_at FROM Post
WHERE id = $1
`

func (q *Queries) GetPostbyID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPostbyID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Article,
		&i.Picture,
		&i.UserID,
		&i.CommunityID,
		&i.Upvotes,
		&i.CreatedAt,
	)
	return i, err
}

const createPost = `-- name: createPost :one
INSERT INTO Post (
  id,
  title,
  article,
  picture,
  user_id,
  community_id,
  created_at
) VALUES (
  $1,$2,$3,$4,$5,$6,CURRENT_TIMESTAMP
) RETURNING id, title, article, picture, user_id, community_id, upvotes, created_at
`

type createPostParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Article     string    `json:"article"`
	Picture     []byte    `json:"picture"`
	UserID      uuid.UUID `json:"user_id"`
	CommunityID uuid.UUID `json:"community_id"`
}

func (q *Queries) createPost(ctx context.Context, arg createPostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Article,
		arg.Picture,
		arg.UserID,
		arg.CommunityID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Article,
		&i.Picture,
		&i.UserID,
		&i.CommunityID,
		&i.Upvotes,
		&i.CreatedAt,
	)
	return i, err
}
